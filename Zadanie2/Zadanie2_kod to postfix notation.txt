/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <string>

using namespace std;

class TStos
{
    char *elementy; //miejsce na znaki i elementy
    int ile; //do zapamiętania ile jest tych elementów
    
    public: TStos() //public - element widocznosci bo domyslnie sa prywatne - konstruktor, funkcja tworząca obiekt danej klasy
    {
        elementy = NULL;
        ile = 0;
    }
    
    TStos(int a)
    {
        elementy = new char[ile];
        ile = a;
    }
    
    ~TStos() //destruktor wykonywany przy usuwaniu obiektu
    {
        delete [] elementy;
        cout<<"zwalniam obiekt : "<<ile<<endl;   
    }
    
    void put(char a) //funkcja dodajaca element i zwrocenie go ze szczytu stosu
    {
        char *ntab = new char[ile + 1];
        for (int i = 0; i<ile; i++)
        {
            ntab[i]=elementy[i]; //przepisanie elementow ze starej do nowej tablicy
        };
        ntab[ile] = a;//wstawimy nasz nowy element na pozycje ile
        ile = ile + 1; //zwiekszamy rozmiar bo dotychczas tylko wydluzylismy stos
        //brakuje nam jeszcze przepisania, ze stara tablica ma teraz wskazywac na nowa dluzsza tablice i stara tablice usunac
        delete [] elementy; //najpierw musimy wyczyszczic pamiec zaalokowana na elementy a potem na 
        elementy = ntab;
    }
    
    char get()//funkcja zwracajca element ze stosu
    {
        //zdejmuje ze stosu i zmniejsza rozmiar
        char wynik = elementy[ile-1]; //ostatni znak z obecnej tablicy pobieramy i go potem zwrócimy
        char *ntab = new char[ile - 1]; //stworzenie tablicy o jeden mniejszej niz stos
        for (int i = 0; i<ile-1; i++) //przepisujemy elementy do elementu przedostatniego
        {
            ntab[i]=elementy[i];
        };
        
        ile=ile - 1;
        delete [] elementy;
        elementy = ntab;
        return wynik; //zwrócenie wyniku
    }
    
    char top() //funkcja zwaracająca wierzchołek stosu
    {
        return elementy[ile-1];
    }
    
    bool empty()
    {
        if (ile == 0) {return true;}
        else
        {
            return false;
        }
    }

//do testowania potzrebujemy funkcji ktora pokaze nam statn stosu
    void show()
    {
        cout<<"#";
        for(int i=0;i<ile;i++)
        {
            cout<<" "<< elementy[i]<<",";
        }
        cout<<endl;
    }
    
};/////ważne na końcu klassy robimy średnik

//funkcja zwracajaca odpowiednia wartosc priorytetu dla znakow
int prec(char c) {
	if(c == '^')
		return 3;
	else if(c == '/' || c=='*')
		return 2;
	else if(c == '+' || c == '-')
		return 1;
	else
		return -1;
}


// The main function to convert infix expression
//to postfix expression
void infixToPostfix(string s) {

	TStos *wskStosTxt = new TStos(0);
	//stack<char> st; //For stack operations, we are using C++ built in stack
	string result;

	for(int i = 0; i < s.length(); i++) {
		char c = s[i];

		// If the scanned character is
		// an operand, add it to output string.
		if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
			result += c;

		// If the scanned character is an
		// ‘(‘, push it to the stack.
		else if(c == '(')
			wskStosTxt -> put('(');

		// If the scanned character is an ‘)’,
		// pop and to output string from the stack
		// until an ‘(‘ is encountered.
		else if(c == ')') {
			while(wskStosTxt -> top() != '(')
			{
				result += wskStosTxt -> top();
				wskStosTxt -> get();
			}
			wskStosTxt -> get();
		}

		//If an operator is scanned
		else {
			while(!wskStosTxt -> empty() && prec(s[i]) <= prec(wskStosTxt -> top())) {
				result += wskStosTxt -> top();
				wskStosTxt -> get();
			}
			wskStosTxt -> put(c);
		}
	}

	// Pop all the remaining elements from the stack
	while(!wskStosTxt -> empty()) {
		result += wskStosTxt -> top();
		wskStosTxt -> get();
	}

	cout << result << endl;
}







int main()
{
    string text;
    getline(cin,text);
    cout<<text.length()<<endl;
    cout << text;
    
    TStos *wskStosTxt = new TStos(0);
    for (int i = 0;i<text.length();i++)
    {
        wskStosTxt -> put(text[i]);
        wskStosTxt -> show();
    }
    delete wskStosTxt;
    
    string exp = "2*2-3*4+2-3*3";
	infixToPostfix(exp);
    
    
    //wejscie przekierujemy do funkcji, ktora zamieni to na infixowa postac
    //string infix = convertToInfix(text);
    
    //jak bedziemy mieli wartosc funkcji infixowa to pchamy do ONP i do usuzkania wartosci
    //int value = calcONP(infix)
    //do wykorzystania algorytm/mechanizm szablonowania funkcji i klas
    
    //cout << "Finalna wartosc to: " << value<<endl;
    
    cout << "koniec programu";
    
    return 0;
}
